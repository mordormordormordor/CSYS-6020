import numpy as np
from matplotlib import cm
from matplotlib import patches
from matplotlib import pyplot as plt

def visualize_rule(rule, S, K, grid=False):
    n_configs = S**K #number of rules for K cells in one of S states
    sqrt_n_configs = int(np.ceil(np.sqrt(n_configs)))

    if grid:
        fig, ax = plt.subplots(figsize=(sqrt_n_configs*(K+1), sqrt_n_configs*3))
    else:
        fig, ax = plt.subplots(figsize=(n_configs*(K+1), 2))

    plt.axis('off')
    ax.set_aspect('equal')

    if grid:
        ax.set_xlim(-S//2-1,sqrt_n_configs*(K+1))
        ax.set_ylim(-1,sqrt_n_configs*3)
    else:
        ax.set_xlim(-S//2-1,n_configs*(K+1))
        ax.set_ylim(-1,2)

    colors = cm.bone(np.linspace(0,1,S))

    config_i = 0
    config = [(config_i//(S**k))%S for k in range(K)]
    for i in range(sqrt_n_configs if grid else n_configs):
        for j in range(sqrt_n_configs if grid else 1):
            if grid:
                xy = np.array((j*(K+1), (sqrt_n_configs-i-1)*3))
            else:
                xy = np.array(((n_configs-i-1)*(K+1), 0))

            ax.add_patch(patches.Rectangle(
                xy, 1, 1,
                color=colors[rule[config_i]], fill=True
            ))
            ax.add_patch(patches.Rectangle(
                xy, 1, 1,
                color='black', fill=False
            ))

            for k in range(K):
                ax.add_patch(patches.Rectangle(
                    xy + np.array((k-K//2,1)), 1, 1,
                    color=colors[config[k]], fill=True
                ))
                ax.add_patch(patches.Rectangle(
                    xy + np.array((k-K//2,1)), 1, 1,
                    color='black', fill=False
                ))

            config_i += 1
            config = [(config_i//(S**k))%S for k in range(K)][::-1]
            if config_i >= n_configs:
                return fig, ax

for code in [1, 30, 90, 110, 184]:
    fig, ax = visualize_rule(decode_rule(code, 2, 3), 2, 3, grid=False)
    ax.text(-.3, 2.2, f'Rule {code}', c='black', fontsize=15)
    plt.show() #remember white = 1 (or on) and black = 0 (or off)
